"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var restify = __importStar(require("restify"));
var Gateway_1 = require("../Gateway");
var azure_iot_common_1 = require("azure-iot-common");
var connectionString = process.env.IOTHUB_CONNECTION_STRING;
var gateway = new Gateway_1.Gateway();
var latestMessage = {};
gateway.on('message', function (message) {
    latestMessage = message;
    console.log(message);
});
var server = restify.createServer();
server.use(restify.plugins.bodyParser());
server.get('/', function (req, res, next) {
    res.send(latestMessage);
    next();
});
server.post('/:deviceId', function (req, res, next) {
    return __awaiter(this, void 0, void 0, function () {
        var message, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    message = new azure_iot_common_1.Message(req.body);
                    console.time('Send message took');
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, gateway.sendMessage(req.params.deviceId, message)];
                case 2:
                    _a.sent();
                    console.timeEnd('Send message took');
                    res.statusCode = 201;
                    res.send();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    res.statusCode = 500;
                    res.send(error_1);
                    return [3 /*break*/, 4];
                case 4:
                    next();
                    return [2 /*return*/];
            }
        });
    });
});
var firstId = 0;
var lastId = 1000;
var devices = [];
for (var i = firstId; i < lastId; i++) {
    devices.push('CCACBBBA' + ('00000000' + i).slice(-8));
}
;
var start = function () {
    return __awaiter(this, void 0, void 0, function () {
        var addDevicePromises, error_2, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.time('Open took');
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 9]);
                    return [4 /*yield*/, gateway.open(connectionString)];
                case 2:
                    _a.sent();
                    console.timeEnd('Open took');
                    addDevicePromises = [];
                    devices.forEach(function (deviceId) {
                        addDevicePromises.push(gateway.addDevice(deviceId));
                    });
                    console.time('Add devices took');
                    return [4 /*yield*/, Promise.all(addDevicePromises)];
                case 3:
                    _a.sent();
                    console.timeEnd('Add devices took');
                    return [3 /*break*/, 9];
                case 4:
                    error_2 = _a.sent();
                    console.log(error_2);
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, gateway.close()];
                case 6:
                    _a.sent();
                    server.close();
                    return [3 /*break*/, 8];
                case 7:
                    error_3 = _a.sent();
                    console.log(error_3);
                    server.close();
                    return [3 /*break*/, 8];
                case 8: return [3 /*break*/, 9];
                case 9: return [2 /*return*/];
            }
        });
    });
};
var port = process.env.PORT || 8080;
server.listen(port, function () {
    console.log('Server listening at %s', server.url);
    start();
});
//# sourceMappingURL=server.js.map